#!/usr/bin/env bash

# This script will sync the files generated by the chukwa collector to hdfs only if the file doesn't exist on hdfs or the file size is smaller on hdfs.
# After a file has been uploaded to hdfs it will be moved to the synced folder

lock_file="/opt/streams-collector/bin/AWSlogSyncToData.lock"

if [ -e $lock_file ]
then
   date
   echo "Lock file exist"
else
     date
     echo "Creatiing lock file - $lock_file"
     touch $lock_file

if [ -z $2 ]
then
 echo "Type <synced_dir> <remote_log_dir>"
 exit -1
fi

SYNCED_DIR=$1
REMOTE_LOG_DIR=$2

for f in $( find -L $SYNCED_DIR -name "*[0-9][0-9][0-9][0-9]-[0-9][0-9]\-[0-9][0-9]\-[0-9][0-9].*?.lzo"|sort )
do

fileName=$(basename $f)
echo "fileName: $fileName"

uploadName="`hostname`~$fileName"

#logtypeval=$( echo "$fileName" | awk -F "~" '{print $2}')

#logType=$( echo "$logtypeval" | awk -F '.' '{print $1}' )

logType=$( echo "$fileName" | awk -F "." '{print $1}')

daydate_part=$( echo "$fileName" | awk -F '.' '{print $2}' )

#the daydate format is yyyy/MM/dd
daydate=$( echo "$daydate_part" | awk -F '-' '{print "year_"$1"/month_"$2"/day_"$3}' )


#validate the daydate field. We do not know what the filename will be we can only assume
#if the file name is not in the format expected then we'll not get the correct daydate
if [[ ! "$daydate" =~ (year_[0-9][0-9][0-9][0-9]/month_[0-9][0-9]/day_[0-9][0-9]) ]]
then
   echo "File name incorrect"
   echo "The daydate format for file $fileName was $daydate"
   exit -1
fi


hour=$( echo "$daydate_part" | awk -F '-' '{print $4}' )

#validate hour
if [[ ! "$hour" =~ ([0-9][0-9]) ]]
then
  echo "File name incorrect"
  echo "The hour format is not correct for file $fileName was $hour"
fi


if [ "$logType" == "imp" ]
then
	mv $f $REMOTE_LOG_DIR
else
	echo "Date $daydate Hour $hour LogType: $logType Upload Name $uploadName"
	date
	#rsync -azve ssh $f root@data01:/data/awsrawlog/${logType}/${daydate}/hour_${hour}/${uploadName}
	rsync -azve "ssh -p 2814 -oStrictHostKeyChecking=no" $f root@tqdg025:/data/rawlog/${logType}/${daydate}/hour_${hour}/${uploadName}
	if [ $? -eq 0 ];then
		mv $f $REMOTE_LOG_DIR
		#rm $f
	else
		echo "Unable to copy $f to data01 server path - /data/rawlog/${logType}/$daydate/hour_$hour/"
	fi
	date
fi
done
   echo "Removing local file - $lock_file"
   rm -f $lock_file
   date
fi
